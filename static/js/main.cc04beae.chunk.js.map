{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","d","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","Date","getDay","getDate","getMonth","getFullYear","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAGMA,G,MACA,oCADAA,EAEC,2CAiEQC,MA/Df,WAAgB,IAkBMC,EAlBP,EACYC,mBAAS,IADrB,mBACNC,EADM,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAENG,EAFM,KAEEC,EAFF,KA4Bf,OACI,qBAAKC,UAAkC,oBAAfF,EAAQG,MAC/BH,EAAQG,KAAKC,KAAK,GAAI,WACtB,MAFD,SAIE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAGT,EAASS,EAAEC,OAAOC,QAChCC,WApCK,SAACC,GACC,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAIpB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACvDqB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,OA8BVR,MAAOZ,MAGa,oBAAfE,EAAQG,KACf,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,IAA0CrB,EAAQsB,IAAIC,WACtD,qBAAKrB,UAAU,OAAf,UA9BQN,EA8B2B,IAAI4B,KA5BtC,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACjE5B,EAAE6B,UAKJ,IAJF7B,EAAE8B,UAIS,IAPP,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAI3G9B,EAAE+B,YAGW,IAFrB/B,EAAEgC,oBA0BH,sBAAK1B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACG2B,KAAKC,MAAM9B,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAG/C,SCpDG4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cc04beae.chunk.js","sourcesContent":["import './App.css';\nimport React,{useState} from 'react';\n\nconst api={\n  key:'74f6afcdfb007dfff61c9d9deb9e6a61',\n  base:'https://api.openweathermap.org/data/2.5/'\n}\nfunction App() {\n  const [query,setQuery] = useState(''); \n  const [weather,setWeather] = useState({}); \n\n  const search = (evt) =>{\n    if(evt.key === 'Enter'){\n      fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n        .then(res=>res.json())\n        .then(result=>{ \n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n\n\n  const dateBuilder= (d)=>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day=days[d.getDay()]\n    let date=d.getDate();\n    let month=months[d.getMonth()]\n    let year=d.getFullYear();\n    // return `${day} ${date} ${month} ${year}`;\n    return day+\" \"+date+\" \"+month+\" \"+year;\n  }  \nreturn (\n    <div className={(typeof weather.main !='undefined')?\n    (weather.main.temp>16)?'app warm':'app'\n    :'app'}\n    >\n      <main>\n        <div className='search-box'>\n          <input \n            type='text'\n            className='search-bar'\n            placeholder='Search...'\n            onChange={e =>setQuery(e.target.value)}\n            onKeyPress={search} \n            value={query}\n          />\n        </div>\n        {(typeof weather.main !='undefined') ?(\n          <div>  \n            <div className='location-box'>\n              <div className='location'>{weather.name},{weather.sys.country}</div>\n              <div className='date'>{dateBuilder(new Date())}</div>\n            </div>\n            <div className='weather-box'>\n              <div className='temp'>\n                {Math.round(weather.main.temp)}Â°C\n              </div>\n              <div className='weather'>{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ): ('') }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}